{"ast":null,"code":"import Header from'./components/Header.js';import Body from'./components/Body.js';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{title:\"\\uC81C\\uBAA9 1\\uBC88\",titlesub:\"\\uBD80\\uAC00 \\uB0B4\\uC6A9\"}),/*#__PURE__*/_jsx(Header,{title:\"\\uC81C\\uBAA9 2\\uBC88\"}),/*#__PURE__*/_jsxs(Body,{content:\"body content\",children:[\" \",/*#__PURE__*/_jsx(\"button\",{children:\" body \"}),\" \"]}),/*#__PURE__*/_jsxs(Body,{children:[\" \",/*#__PURE__*/_jsx(\"button\",{children:\" body \"}),\" \"]})]})//button : body의 자식 엘리먼트\n//자식엘리먼트는 props의 children이라는 속성으로 넘겨진다.\n//flagment : 태그를 하나로 묶기 위해 리액트에서만 사용하는 태그.\n//undefined : 화면에 표시 X.\n//props : default값을 가질수 있다.\n;}export default App;//jsx : javascript + xml -> 리액트가 사용.\n//jsx App: 컴포넌트 -> ui를 만들어냄.\n//클래스 컴포넌트 : 권장 X\n//함수 컴포넌트 : 이것만 지원함.\n//->사용자 태그\n//tag들의 집합을 반환한다.\n//return은 하나의 태그만 리턴할 수 있음.\n//Component를 만들때 소문자로 만들면 안 된다. 왜? 함수와 비교하기 위해.\n//component : 쪼갤수 없는 요소. 독립적으로도 실행 가능하면서도 연계 역시 가능\n//component의 속성 : property -> props","map":{"version":3,"names":["Header","Body","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","children","title","titlesub","content"],"sources":["C:/Users/Nestell/Documents/GitHub/Linux_Ptc_2/src/App.js"],"sourcesContent":["import Header from './components/Header.js';\nimport Body from './components/Body.js';\n\nfunction App() {\n  return (<>\n    <Header title = \"제목 1번\" titlesub = \"부가 내용\"/>\n    <Header title = \"제목 2번\"/>\n    <Body content = \"body content\"> <button> body </button> </Body>\n    <Body> <button> body </button> </Body>\n  </>\n    //button : body의 자식 엘리먼트\n    //자식엘리먼트는 props의 children이라는 속성으로 넘겨진다.\n    //flagment : 태그를 하나로 묶기 위해 리액트에서만 사용하는 태그.\n    //undefined : 화면에 표시 X.\n    //props : default값을 가질수 있다.\n  );\n}\n\nexport default App;\n\n//jsx : javascript + xml -> 리액트가 사용.\n//jsx App: 컴포넌트 -> ui를 만들어냄.\n//클래스 컴포넌트 : 권장 X\n//함수 컴포넌트 : 이것만 지원함.\n//->사용자 태그\n//tag들의 집합을 반환한다.\n//return은 하나의 태그만 리턴할 수 있음.\n//Component를 만들때 소문자로 만들면 안 된다. 왜? 함수와 비교하기 위해.\n//component : 쪼갤수 없는 요소. 독립적으로도 실행 가능하면서도 연계 역시 가능\n//component의 속성 : property -> props"],"mappings":"AAAA,MAAO,CAAAA,MAAM,KAAM,wBAAwB,CAC3C,MAAO,CAAAC,IAAI,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAExC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,mBAAQH,KAAA,CAAAE,SAAA,EAAAE,QAAA,eACNN,IAAA,CAACH,MAAM,EAACU,KAAK,CAAG,sBAAO,CAACC,QAAQ,CAAG,2BAAO,CAAC,CAAC,cAC5CR,IAAA,CAACH,MAAM,EAACU,KAAK,CAAG,sBAAO,CAAC,CAAC,cACzBL,KAAA,CAACJ,IAAI,EAACW,OAAO,CAAG,cAAc,CAAAH,QAAA,EAAC,GAAC,cAAAN,IAAA,WAAAM,QAAA,CAAQ,QAAM,CAAQ,CAAC,IAAC,EAAM,CAAC,cAC/DJ,KAAA,CAACJ,IAAI,EAAAQ,QAAA,EAAC,GAAC,cAAAN,IAAA,WAAAM,QAAA,CAAQ,QAAM,CAAQ,CAAC,IAAC,EAAM,CAAC,EACtC,CACA;AACA;AACA;AACA;AACA;AAAA,CAEJ,CAEA,cAAe,CAAAD,GAAG,CAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}